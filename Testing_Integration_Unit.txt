Frontend (Angular)
Unit Tests
Purpose: Unit tests are designed to test individual components, services, and other parts of the application in isolation.

Setting Up Unit Tests:

Angular CLI sets up Jasmine and Karma for unit testing by default. Ensure your angular.json has the following configurations:
json

"test": {
  "builder": "@angular-devkit/build-angular:karma",
  "options": {
    "main": "src/test.ts",
    "polyfills": "src/polyfills.ts",
    "tsConfig": "tsconfig.spec.json",
    "karmaConfig": "karma.conf.js",
    "assets": ["src/favicon.ico", "src/assets"],
    "styles": ["src/styles.css"],
    "scripts": []
  }
}
Writing Unit Tests:

Component Test: Test the BlogFormComponent.

typescript

import { ComponentFixture, TestBed } from '@angular/core/testing';
import { ReactiveFormsModule } from '@angular/forms';
import { BlogFormComponent } from './blog-form.component';

describe('BlogFormComponent', () => {
  let component: BlogFormComponent;
  let fixture: ComponentFixture<BlogFormComponent>;

  beforeEach(async () => {
    await TestBed.configureTestingModule({
      declarations: [BlogFormComponent],
      imports: [ReactiveFormsModule]
    }).compileComponents();
  });

  beforeEach(() => {
    fixture = TestBed.createComponent(BlogFormComponent);
    component = fixture.componentInstance;
    fixture.detectChanges();
  });

  it('should create', () => {
    expect(component).toBeTruthy();
  });

  it('form should be invalid when empty', () => {
    expect(component.blogForm.valid).toBeFalsy();
  });

  it('username field validity', () => {
    const username = component.blogForm.controls['username'];
    expect(username.valid).toBeFalsy();
    username.setValue('');
    expect(username.hasError('required')).toBeTruthy();
  });

  it('should emit formSubmit event on submit', () => {
    spyOn(component.formSubmit, 'emit');
    component.blogForm.controls['username'].setValue('Test User');
    component.blogForm.controls['text'].setValue('Test Post');
    component.onSubmit();
    expect(component.formSubmit.emit).toHaveBeenCalledWith(jasmine.any(Object));
  });
});
Service Test: Test the BlogService.

typescript

import { TestBed } from '@angular/core/testing';
import { HttpClientTestingModule, HttpTestingController } from '@angular/common/http/testing';
import { BlogService } from './blog.service';

describe('BlogService', () => {
  let service: BlogService;
  let httpMock: HttpTestingController;

  beforeEach(() => {
    TestBed.configureTestingModule({
      imports: [HttpClientTestingModule],
      providers: [BlogService]
    });
    service = TestBed.inject(BlogService);
    httpMock = TestBed.inject(HttpTestingController);
  });

  it('should be created', () => {
    expect(service).toBeTruthy();
  });

  it('should retrieve blog posts', () => {
    const dummyPosts = [{ id: 1, username: 'User1', text: 'Post1' }];
    service.getBlogPosts().subscribe(posts => {
      expect(posts.length).toBe(1);
      expect(posts).toEqual(dummyPosts);
    });

    const request = httpMock.expectOne(`${service.apiUrl}`);
    expect(request.request.method).toBe('GET');
    request.flush(dummyPosts);
  });

  afterEach(() => {
    httpMock.verify();
  });
});
Integration Tests
Purpose: Integration tests verify that different parts of the application work together as expected.

Setting Up Integration Tests:

Integration tests often require a testing environment that mimics production. Ensure that your testing module imports necessary dependencies and configures services properly.
Writing Integration Tests:

Example integration test for a feature (e.g., creating a blog post and verifying it appears in the list).
typescript

import { ComponentFixture, TestBed } from '@angular/core/testing';
import { BlogListComponent } from './blog-list.component';
import { BlogService } from '../services/blog.service';
import { HttpClientTestingModule } from '@angular/common/http/testing';

describe('BlogListComponent Integration Test', () => {
  let component: BlogListComponent;
  let fixture: ComponentFixture<BlogListComponent>;
  let service: BlogService;

  beforeEach(async () => {
    await TestBed.configureTestingModule({
      declarations: [BlogListComponent],
      imports: [HttpClientTestingModule],
      providers: [BlogService]
    }).compileComponents();
  });

  beforeEach(() => {
    fixture = TestBed.createComponent(BlogListComponent);
    component = fixture.componentInstance;
    service = TestBed.inject(BlogService);
    fixture.detectChanges();
  });

  it('should create and display blog posts', () => {
    const dummyPosts = [{ id: 1, username: 'User1', text: 'Post1' }];
    spyOn(service, 'getBlogPosts').and.returnValue(of(dummyPosts));
    component.ngOnInit();
    fixture.detectChanges();
    const compiled = fixture.nativeElement;
    expect(compiled.querySelector('li').textContent).toContain('Post1');
  });
});
Backend (.NET Core)
Unit Tests
Purpose: Unit tests for backend services, controllers, and other components to ensure they work correctly in isolation.




Setting Up Unit Tests:

.NET Core uses xUnit or NUnit for unit testing. Ensure your project file (.csproj) includes the following dependencies:
xml

<ItemGroup>
  <PackageReference Include="Microsoft.NET.Test.Sdk" Version="16.9.4" />
  <PackageReference Include="xunit" Version="2.4.1" />
  <PackageReference Include="xunit.runner.visualstudio" Version="2.4.3" />
  <PackageReference Include="Moq" Version="4.16.1" />
</ItemGroup>
Writing Unit Tests:

Service Test: Test BlogService.

csharp
Copy code
using Moq;
using Xunit;
using BlogApi.Services;
using BlogApi.Models;
using BlogApi.Data;
using System.Collections.Generic;
using System.Threading.Tasks;
using Microsoft.EntityFrameworkCore;

public class BlogServiceTests
{
    private readonly Mock<IBlogRepository> _mockRepo;
    private readonly BlogService _service;

    public BlogServiceTests()
    {
        _mockRepo = new Mock<IBlogRepository>();
        _service = new BlogService(_mockRepo.Object);
    }

    [Fact]
    public async Task GetAllBlogPosts_ShouldReturnAllPosts()
    {
        var posts = new List<BlogPost> { new BlogPost { Id = 1, Username = "User1", Text = "Post1" } };
        _mockRepo.Setup(repo => repo.GetAllAsync()).ReturnsAsync(posts);

        var result = await _service.GetAllBlogPosts();

        Assert.Single(result);
        Assert.Equal("Post1", result[0].Text);
    }
}
Controller Test: Test BlogPostsController.

csharp

using Moq;
using Xunit;
using BlogApi.Controllers;
using BlogApi.Services;
using BlogApi.Models;
using Microsoft.AspNetCore.Mvc;
using System.Threading.Tasks;

public class BlogPostsControllerTests
{
    private readonly Mock<IBlogService> _mockService;
    private readonly BlogPostsController _controller;

    public BlogPostsControllerTests()
    {
        _mockService = new Mock<IBlogService>();
        _controller = new BlogPostsController(_mockService.Object);
    }

    [Fact]
    public async Task GetBlogPosts_ShouldReturnOkResult_WithBlogPosts()
    {
        var posts = new List<BlogPost> { new BlogPost { Id = 1, Username = "User1", Text = "Post1" } };
        _mockService.Setup(service => service.GetAllBlogPosts()).ReturnsAsync(posts);

        var result = await _controller.GetBlogPosts();

        var okResult = Assert.IsType<OkObjectResult>(result);
        var returnPosts = Assert.IsType<List<BlogPost>>(okResult.Value);
        Assert.Single(returnPosts);
    }
}
Integration Tests
Purpose: Integration tests ensure that various parts of the application work together correctly. They test the overall flow and integration between components.

Setting Up Integration Tests:

Integration tests require a testing environment that mimics production as closely as possible. Use the WebApplicationFactory for testing ASP.NET Core applications.
xml
Copy code
<ItemGroup>
  <PackageReference Include="Microsoft.AspNetCore.Mvc.Testing" Version="5.0.7" />
</ItemGroup>
Writing Integration Tests:

Example integration test for a feature (e.g., creating and retrieving a blog post).
csharp

using System.Net.Http;
using System.Threading.Tasks;
using Microsoft.AspNetCore.Mvc.Testing;
using Xunit;
using BlogApi;

public class BlogApiIntegrationTests : IClassFixture<WebApplicationFactory<Startup>>
{
    private readonly HttpClient _client;

    public BlogApiIntegrationTests(WebApplicationFactory<Startup> factory)
    {
        _client = factory.CreateClient();
    }

    [Fact]
    public async Task CreateAndGetBlogPost()
    {
        var newPost = new { Username = "User1", Text = "Post1" };
        var response = await _client.PostAsJsonAsync("/api/Blogposts", newPost);
        response.EnsureSuccessStatusCode();

        var responseGet = await _client.GetAsync("/api/Blogposts");
        responseGet.EnsureSuccessStatusCode();
        var posts = await responseGet.Content.ReadAsAsync<List<BlogPost>>();

        Assert.Single(posts);
        Assert.Equal("Post1", posts[0].Text);
    }
}
